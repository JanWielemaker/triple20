\documentclass[11pt]{article}
\usepackage{pl}
\usepackage{html}
\sloppy
\makeindex

\onefile
\htmloutput{html}				% Output directory
\htmlmainfile{index}				% Main document file
\bodycolor{white}				% Page colour

\renewcommand{\runningtitle}{Triple20 Manual}

\newcommand{\elem}[1]{{\tt\string<#1\string>}}

\begin{document}

\title{Triple20: an RDF triple viewer and editor}
\author{Jan Wielemaker \\
	SWI, \\
	University of Amsterdam \\
	The Netherlands \\
	E-mail: \email{jan@swi.psy.uva.nl}}

\maketitle

\begin{abstract}
This document describes Triple20, a library of graphical components in
SWI-Prolog/XPCE for visualization and editing of Semantic Web data
stored in the \file{rdf_db} triple library.

This version of the document only provides a brief overview of the files
and installation of the toolkit.
\end{abstract}

\vfill
\pagebreak
\tableofcontents

\newpage

\section{Introduction}

Triple20 is a toolkit for visualization and editing of data
in the \pllib{rdf_db} \emph{triple store}.



\section{Projects and files}

\section{Namespaces}

\section{Project files and snapshots}

A \emph{project file} \fileext{rdfj} is a \jargon{journal} of executed
edit operations.  This approach has several advantages over the normal
load-modify-save cycle.

\begin{itemize}
    \item Ontology files can be very large.  Managing a journal of actions
          provides space and time performance benefits.

    \item A journal protects the user from loosing work due to crashes or
          other malfunctioning of experimental software.

    \item A journal provides an excelent starting point for advanced 
          version management as well as studying user behaviour.
\end{itemize}

There are various alternatives for handling the loading of ontology
files in the journal. One is to simply add the fact that a file is
loaded. This can be attractive because the journal acts as a set of edit
operations that can be executed on a modified version of the same file.
Unfortunately it also easily leads to problems if the file is saved from
the tool. For this reason Triple20 maintains a \jargon{snapshot}
directory where it stores snapshots of ontology files loaded into
projects.  The name for these files is created from the original file
as well as an MD5 digest constructed from the triples.  The journal
contains information on the original file (name, time modified, size,
number of triples) as well as the MD5 digest. If the journal is replayed
it will first try to locate the snapshot from the MD5 digest and name,
loading exactly the same file.  If this fails Triple20 tries to locate
the ontology file itself.


		 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
		 %	      FOOTER		%
		 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

\printindex

\end{document}


